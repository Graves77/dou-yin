// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: mongodbmanage.proto

package mongodbmanageserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MongodbManageServerClient is the client API for MongodbManageServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MongodbManageServerClient interface {
	MakeComment(ctx context.Context, in *CommentActionRequest, opts ...grpc.CallOption) (*CommentActionResponse, error)
	GetComment(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error)
	GetMessage(ctx context.Context, in *MessageChatRequest, opts ...grpc.CallOption) (*MessageChatResponse, error)
	SendMessage(ctx context.Context, in *MessageActionRequest, opts ...grpc.CallOption) (*MessageActionResponse, error)
}

type mongodbManageServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMongodbManageServerClient(cc grpc.ClientConnInterface) MongodbManageServerClient {
	return &mongodbManageServerClient{cc}
}

func (c *mongodbManageServerClient) MakeComment(ctx context.Context, in *CommentActionRequest, opts ...grpc.CallOption) (*CommentActionResponse, error) {
	out := new(CommentActionResponse)
	err := c.cc.Invoke(ctx, "/mongodbmanageserver.MongodbManageServer/MakeComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongodbManageServerClient) GetComment(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error) {
	out := new(CommentListResponse)
	err := c.cc.Invoke(ctx, "/mongodbmanageserver.MongodbManageServer/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongodbManageServerClient) GetMessage(ctx context.Context, in *MessageChatRequest, opts ...grpc.CallOption) (*MessageChatResponse, error) {
	out := new(MessageChatResponse)
	err := c.cc.Invoke(ctx, "/mongodbmanageserver.MongodbManageServer/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongodbManageServerClient) SendMessage(ctx context.Context, in *MessageActionRequest, opts ...grpc.CallOption) (*MessageActionResponse, error) {
	out := new(MessageActionResponse)
	err := c.cc.Invoke(ctx, "/mongodbmanageserver.MongodbManageServer/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongodbManageServerServer is the server API for MongodbManageServer service.
// All implementations must embed UnimplementedMongodbManageServerServer
// for forward compatibility
type MongodbManageServerServer interface {
	MakeComment(context.Context, *CommentActionRequest) (*CommentActionResponse, error)
	GetComment(context.Context, *CommentListRequest) (*CommentListResponse, error)
	GetMessage(context.Context, *MessageChatRequest) (*MessageChatResponse, error)
	SendMessage(context.Context, *MessageActionRequest) (*MessageActionResponse, error)
	mustEmbedUnimplementedMongodbManageServerServer()
}

// UnimplementedMongodbManageServerServer must be embedded to have forward compatible implementations.
type UnimplementedMongodbManageServerServer struct {
}

func (UnimplementedMongodbManageServerServer) MakeComment(context.Context, *CommentActionRequest) (*CommentActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeComment not implemented")
}
func (UnimplementedMongodbManageServerServer) GetComment(context.Context, *CommentListRequest) (*CommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedMongodbManageServerServer) GetMessage(context.Context, *MessageChatRequest) (*MessageChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedMongodbManageServerServer) SendMessage(context.Context, *MessageActionRequest) (*MessageActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMongodbManageServerServer) mustEmbedUnimplementedMongodbManageServerServer() {}

// UnsafeMongodbManageServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongodbManageServerServer will
// result in compilation errors.
type UnsafeMongodbManageServerServer interface {
	mustEmbedUnimplementedMongodbManageServerServer()
}

func RegisterMongodbManageServerServer(s grpc.ServiceRegistrar, srv MongodbManageServerServer) {
	s.RegisterService(&MongodbManageServer_ServiceDesc, srv)
}

func _MongodbManageServer_MakeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongodbManageServerServer).MakeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongodbmanageserver.MongodbManageServer/MakeComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongodbManageServerServer).MakeComment(ctx, req.(*CommentActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongodbManageServer_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongodbManageServerServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongodbmanageserver.MongodbManageServer/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongodbManageServerServer).GetComment(ctx, req.(*CommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongodbManageServer_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongodbManageServerServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongodbmanageserver.MongodbManageServer/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongodbManageServerServer).GetMessage(ctx, req.(*MessageChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongodbManageServer_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongodbManageServerServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongodbmanageserver.MongodbManageServer/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongodbManageServerServer).SendMessage(ctx, req.(*MessageActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MongodbManageServer_ServiceDesc is the grpc.ServiceDesc for MongodbManageServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongodbManageServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mongodbmanageserver.MongodbManageServer",
	HandlerType: (*MongodbManageServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeComment",
			Handler:    _MongodbManageServer_MakeComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _MongodbManageServer_GetComment_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _MongodbManageServer_GetMessage_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _MongodbManageServer_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongodbmanage.proto",
}
