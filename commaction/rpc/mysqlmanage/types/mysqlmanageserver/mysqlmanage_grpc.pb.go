// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: mysqlmanage.proto

package mysqlmanageserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MySQLManageServerClient is the client API for MySQLManageServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MySQLManageServerClient interface {
	// 获得用户信息
	CheckUserInf(ctx context.Context, in *CheckUserInfRequest, opts ...grpc.CallOption) (*CheckUserInfResponse, error)
	// 发布列表视频信息
	GetVideoList(ctx context.Context, in *GetVideoListRequest, opts ...grpc.CallOption) (*GetVideoListResponse, error)
	// 发布列表视频数量
	VideoNum(ctx context.Context, in *VideoNumRequest, opts ...grpc.CallOption) (*VideoNumResponse, error)
	// 关注、取消关注
	RelationAction(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error)
	// 粉丝列表
	RelationFollowerList(ctx context.Context, in *RelationFollowerListRequest, opts ...grpc.CallOption) (*RelationFollowerListResponse, error)
	// 关注列表
	RelationFollowList(ctx context.Context, in *RelationFollowListRequest, opts ...grpc.CallOption) (*RelationFollowListResponse, error)
	// 喜欢视频数量
	FavoriteVideoNum(ctx context.Context, in *FavoriteVideoNumRequest, opts ...grpc.CallOption) (*FavoriteVideoNumResponse, error)
	// 获取喜欢列表
	GetFavoriteVideoList(ctx context.Context, in *GetFavoriteVideoListRequest, opts ...grpc.CallOption) (*GetFavoriteVideoListResponse, error)
	// 点赞
	AddVideoFavorite(ctx context.Context, in *AddVideoFavoriteRequest, opts ...grpc.CallOption) (*AddVideoFavoriteResponse, error)
	// 取消点赞
	SubVideoFavorite(ctx context.Context, in *SubVideoFavoriteRequest, opts ...grpc.CallOption) (*SubVideoFavoriteResponse, error)
}

type mySQLManageServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMySQLManageServerClient(cc grpc.ClientConnInterface) MySQLManageServerClient {
	return &mySQLManageServerClient{cc}
}

func (c *mySQLManageServerClient) CheckUserInf(ctx context.Context, in *CheckUserInfRequest, opts ...grpc.CallOption) (*CheckUserInfResponse, error) {
	out := new(CheckUserInfResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/CheckUserInf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) GetVideoList(ctx context.Context, in *GetVideoListRequest, opts ...grpc.CallOption) (*GetVideoListResponse, error) {
	out := new(GetVideoListResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/GetVideoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) VideoNum(ctx context.Context, in *VideoNumRequest, opts ...grpc.CallOption) (*VideoNumResponse, error) {
	out := new(VideoNumResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/VideoNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) RelationAction(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error) {
	out := new(RelationActionResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/RelationAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) RelationFollowerList(ctx context.Context, in *RelationFollowerListRequest, opts ...grpc.CallOption) (*RelationFollowerListResponse, error) {
	out := new(RelationFollowerListResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/RelationFollowerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) RelationFollowList(ctx context.Context, in *RelationFollowListRequest, opts ...grpc.CallOption) (*RelationFollowListResponse, error) {
	out := new(RelationFollowListResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/RelationFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) FavoriteVideoNum(ctx context.Context, in *FavoriteVideoNumRequest, opts ...grpc.CallOption) (*FavoriteVideoNumResponse, error) {
	out := new(FavoriteVideoNumResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/FavoriteVideoNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) GetFavoriteVideoList(ctx context.Context, in *GetFavoriteVideoListRequest, opts ...grpc.CallOption) (*GetFavoriteVideoListResponse, error) {
	out := new(GetFavoriteVideoListResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/GetFavoriteVideoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) AddVideoFavorite(ctx context.Context, in *AddVideoFavoriteRequest, opts ...grpc.CallOption) (*AddVideoFavoriteResponse, error) {
	out := new(AddVideoFavoriteResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/AddVideoFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) SubVideoFavorite(ctx context.Context, in *SubVideoFavoriteRequest, opts ...grpc.CallOption) (*SubVideoFavoriteResponse, error) {
	out := new(SubVideoFavoriteResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/SubVideoFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySQLManageServerServer is the server API for MySQLManageServer service.
// All implementations must embed UnimplementedMySQLManageServerServer
// for forward compatibility
type MySQLManageServerServer interface {
	// 获得用户信息
	CheckUserInf(context.Context, *CheckUserInfRequest) (*CheckUserInfResponse, error)
	// 发布列表视频信息
	GetVideoList(context.Context, *GetVideoListRequest) (*GetVideoListResponse, error)
	// 发布列表视频数量
	VideoNum(context.Context, *VideoNumRequest) (*VideoNumResponse, error)
	// 关注、取消关注
	RelationAction(context.Context, *RelationActionRequest) (*RelationActionResponse, error)
	// 粉丝列表
	RelationFollowerList(context.Context, *RelationFollowerListRequest) (*RelationFollowerListResponse, error)
	// 关注列表
	RelationFollowList(context.Context, *RelationFollowListRequest) (*RelationFollowListResponse, error)
	// 喜欢视频数量
	FavoriteVideoNum(context.Context, *FavoriteVideoNumRequest) (*FavoriteVideoNumResponse, error)
	// 获取喜欢列表
	GetFavoriteVideoList(context.Context, *GetFavoriteVideoListRequest) (*GetFavoriteVideoListResponse, error)
	// 点赞
	AddVideoFavorite(context.Context, *AddVideoFavoriteRequest) (*AddVideoFavoriteResponse, error)
	// 取消点赞
	SubVideoFavorite(context.Context, *SubVideoFavoriteRequest) (*SubVideoFavoriteResponse, error)
	mustEmbedUnimplementedMySQLManageServerServer()
}

// UnimplementedMySQLManageServerServer must be embedded to have forward compatible implementations.
type UnimplementedMySQLManageServerServer struct {
}

func (UnimplementedMySQLManageServerServer) CheckUserInf(context.Context, *CheckUserInfRequest) (*CheckUserInfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserInf not implemented")
}
func (UnimplementedMySQLManageServerServer) GetVideoList(context.Context, *GetVideoListRequest) (*GetVideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoList not implemented")
}
func (UnimplementedMySQLManageServerServer) VideoNum(context.Context, *VideoNumRequest) (*VideoNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoNum not implemented")
}
func (UnimplementedMySQLManageServerServer) RelationAction(context.Context, *RelationActionRequest) (*RelationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationAction not implemented")
}
func (UnimplementedMySQLManageServerServer) RelationFollowerList(context.Context, *RelationFollowerListRequest) (*RelationFollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationFollowerList not implemented")
}
func (UnimplementedMySQLManageServerServer) RelationFollowList(context.Context, *RelationFollowListRequest) (*RelationFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationFollowList not implemented")
}
func (UnimplementedMySQLManageServerServer) FavoriteVideoNum(context.Context, *FavoriteVideoNumRequest) (*FavoriteVideoNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteVideoNum not implemented")
}
func (UnimplementedMySQLManageServerServer) GetFavoriteVideoList(context.Context, *GetFavoriteVideoListRequest) (*GetFavoriteVideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteVideoList not implemented")
}
func (UnimplementedMySQLManageServerServer) AddVideoFavorite(context.Context, *AddVideoFavoriteRequest) (*AddVideoFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideoFavorite not implemented")
}
func (UnimplementedMySQLManageServerServer) SubVideoFavorite(context.Context, *SubVideoFavoriteRequest) (*SubVideoFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubVideoFavorite not implemented")
}
func (UnimplementedMySQLManageServerServer) mustEmbedUnimplementedMySQLManageServerServer() {}

// UnsafeMySQLManageServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MySQLManageServerServer will
// result in compilation errors.
type UnsafeMySQLManageServerServer interface {
	mustEmbedUnimplementedMySQLManageServerServer()
}

func RegisterMySQLManageServerServer(s grpc.ServiceRegistrar, srv MySQLManageServerServer) {
	s.RegisterService(&MySQLManageServer_ServiceDesc, srv)
}

func _MySQLManageServer_CheckUserInf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserInfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).CheckUserInf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/CheckUserInf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).CheckUserInf(ctx, req.(*CheckUserInfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_GetVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).GetVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/GetVideoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).GetVideoList(ctx, req.(*GetVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_VideoNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).VideoNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/VideoNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).VideoNum(ctx, req.(*VideoNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_RelationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).RelationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/RelationAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).RelationAction(ctx, req.(*RelationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_RelationFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).RelationFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/RelationFollowerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).RelationFollowerList(ctx, req.(*RelationFollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_RelationFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).RelationFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/RelationFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).RelationFollowList(ctx, req.(*RelationFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_FavoriteVideoNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteVideoNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).FavoriteVideoNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/FavoriteVideoNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).FavoriteVideoNum(ctx, req.(*FavoriteVideoNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_GetFavoriteVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).GetFavoriteVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/GetFavoriteVideoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).GetFavoriteVideoList(ctx, req.(*GetFavoriteVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_AddVideoFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVideoFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).AddVideoFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/AddVideoFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).AddVideoFavorite(ctx, req.(*AddVideoFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_SubVideoFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubVideoFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).SubVideoFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/SubVideoFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).SubVideoFavorite(ctx, req.(*SubVideoFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MySQLManageServer_ServiceDesc is the grpc.ServiceDesc for MySQLManageServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MySQLManageServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mysqlmanageserver.MySQLManageServer",
	HandlerType: (*MySQLManageServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserInf",
			Handler:    _MySQLManageServer_CheckUserInf_Handler,
		},
		{
			MethodName: "GetVideoList",
			Handler:    _MySQLManageServer_GetVideoList_Handler,
		},
		{
			MethodName: "VideoNum",
			Handler:    _MySQLManageServer_VideoNum_Handler,
		},
		{
			MethodName: "RelationAction",
			Handler:    _MySQLManageServer_RelationAction_Handler,
		},
		{
			MethodName: "RelationFollowerList",
			Handler:    _MySQLManageServer_RelationFollowerList_Handler,
		},
		{
			MethodName: "RelationFollowList",
			Handler:    _MySQLManageServer_RelationFollowList_Handler,
		},
		{
			MethodName: "FavoriteVideoNum",
			Handler:    _MySQLManageServer_FavoriteVideoNum_Handler,
		},
		{
			MethodName: "GetFavoriteVideoList",
			Handler:    _MySQLManageServer_GetFavoriteVideoList_Handler,
		},
		{
			MethodName: "AddVideoFavorite",
			Handler:    _MySQLManageServer_AddVideoFavorite_Handler,
		},
		{
			MethodName: "SubVideoFavorite",
			Handler:    _MySQLManageServer_SubVideoFavorite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mysqlmanage.proto",
}
