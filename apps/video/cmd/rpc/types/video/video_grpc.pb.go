// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: video.proto

package video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublishVideoClient is the client API for PublishVideo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublishVideoClient interface {
	PublishVideoAction(ctx context.Context, in *DouyinPublishActionRequest, opts ...grpc.CallOption) (*DouyinPublishActionResponse, error)
	PublishVideoList(ctx context.Context, in *DouyinPublishListRequest, opts ...grpc.CallOption) (*DouyinPublishListResponse, error)
}

type publishVideoClient struct {
	cc grpc.ClientConnInterface
}

func NewPublishVideoClient(cc grpc.ClientConnInterface) PublishVideoClient {
	return &publishVideoClient{cc}
}

func (c *publishVideoClient) PublishVideoAction(ctx context.Context, in *DouyinPublishActionRequest, opts ...grpc.CallOption) (*DouyinPublishActionResponse, error) {
	out := new(DouyinPublishActionResponse)
	err := c.cc.Invoke(ctx, "/video.PublishVideo/PublishVideoAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishVideoClient) PublishVideoList(ctx context.Context, in *DouyinPublishListRequest, opts ...grpc.CallOption) (*DouyinPublishListResponse, error) {
	out := new(DouyinPublishListResponse)
	err := c.cc.Invoke(ctx, "/video.PublishVideo/PublishVideoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublishVideoServer is the server API for PublishVideo service.
// All implementations must embed UnimplementedPublishVideoServer
// for forward compatibility
type PublishVideoServer interface {
	PublishVideoAction(context.Context, *DouyinPublishActionRequest) (*DouyinPublishActionResponse, error)
	PublishVideoList(context.Context, *DouyinPublishListRequest) (*DouyinPublishListResponse, error)
	mustEmbedUnimplementedPublishVideoServer()
}

// UnimplementedPublishVideoServer must be embedded to have forward compatible implementations.
type UnimplementedPublishVideoServer struct {
}

func (UnimplementedPublishVideoServer) PublishVideoAction(context.Context, *DouyinPublishActionRequest) (*DouyinPublishActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideoAction not implemented")
}
func (UnimplementedPublishVideoServer) PublishVideoList(context.Context, *DouyinPublishListRequest) (*DouyinPublishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideoList not implemented")
}
func (UnimplementedPublishVideoServer) mustEmbedUnimplementedPublishVideoServer() {}

// UnsafePublishVideoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublishVideoServer will
// result in compilation errors.
type UnsafePublishVideoServer interface {
	mustEmbedUnimplementedPublishVideoServer()
}

func RegisterPublishVideoServer(s grpc.ServiceRegistrar, srv PublishVideoServer) {
	s.RegisterService(&PublishVideo_ServiceDesc, srv)
}

func _PublishVideo_PublishVideoAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinPublishActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishVideoServer).PublishVideoAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.PublishVideo/PublishVideoAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishVideoServer).PublishVideoAction(ctx, req.(*DouyinPublishActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishVideo_PublishVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinPublishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishVideoServer).PublishVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.PublishVideo/PublishVideoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishVideoServer).PublishVideoList(ctx, req.(*DouyinPublishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublishVideo_ServiceDesc is the grpc.ServiceDesc for PublishVideo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublishVideo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.PublishVideo",
	HandlerType: (*PublishVideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishVideoAction",
			Handler:    _PublishVideo_PublishVideoAction_Handler,
		},
		{
			MethodName: "PublishVideoList",
			Handler:    _PublishVideo_PublishVideoList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
